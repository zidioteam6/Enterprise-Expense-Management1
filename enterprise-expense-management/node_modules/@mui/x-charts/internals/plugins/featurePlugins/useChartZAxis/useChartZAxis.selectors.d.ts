import { ChartState } from "../../models/chart.js";
import { UseChartZAxisSignature } from "./useChartZAxis.types.js";
export declare const selectorChartZAxis: ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & import("./useChartZAxis.types.js").UseChartZAxisState & Partial<{}> & {
  cacheKey: import("../../models/index.js").ChartStateCacheKey;
}) => {
  axis: {
    [axisId: string]: import("../../../index.js").ZAxisDefaultized;
  };
  axisIds: import("../../../index.js").AxisId[];
}) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: ChartState<[UseChartZAxisSignature]>) => {
    axis: {
      [axisId: string]: import("../../../index.js").ZAxisDefaultized;
    };
    axisIds: import("../../../index.js").AxisId[];
  };
  memoizedResultFunc: ((resultFuncArgs_0: ChartState<[UseChartZAxisSignature]>) => {
    axis: {
      [axisId: string]: import("../../../index.js").ZAxisDefaultized;
    };
    axisIds: import("../../../index.js").AxisId[];
  }) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => {
    axis: {
      [axisId: string]: import("../../../index.js").ZAxisDefaultized;
    };
    axisIds: import("../../../index.js").AxisId[];
  };
  dependencies: [(state: ChartState<[UseChartZAxisSignature]>) => ChartState<[UseChartZAxisSignature]>];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};