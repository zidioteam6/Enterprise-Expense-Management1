import { UseChartCartesianAxisSignature } from "./useChartCartesianAxis.types.js";
import { ChartState } from "../../models/chart.js";
export declare const selectorChartCartesianAxisState: (state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
  x: import("../../../index.js").DefaultedXAxis[];
  y: import("../../../index.js").DefaultedYAxis[];
} | undefined;
export declare const selectorChartRawXAxis: ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("../../models/index.js").ChartStateCacheKey;
}) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: {
    x: import("../../../index.js").DefaultedXAxis[];
    y: import("../../../index.js").DefaultedYAxis[];
  } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined;
  memoizedResultFunc: ((resultFuncArgs_0: {
    x: import("../../../index.js").DefaultedXAxis[];
    y: import("../../../index.js").DefaultedYAxis[];
  } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => import("../../../index.js").DefaultedXAxis[] | undefined;
  dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
    x: import("../../../index.js").DefaultedXAxis[];
    y: import("../../../index.js").DefaultedYAxis[];
  } | undefined];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartRawYAxis: ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("../../models/index.js").ChartStateCacheKey;
}) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: {
    x: import("../../../index.js").DefaultedXAxis[];
    y: import("../../../index.js").DefaultedYAxis[];
  } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined;
  memoizedResultFunc: ((resultFuncArgs_0: {
    x: import("../../../index.js").DefaultedXAxis[];
    y: import("../../../index.js").DefaultedYAxis[];
  } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => import("../../../index.js").DefaultedYAxis[] | undefined;
  dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
    x: import("../../../index.js").DefaultedXAxis[];
    y: import("../../../index.js").DefaultedYAxis[];
  } | undefined];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};