import { ChartRootSelector } from "../../utils/selectors.js";
import type { UseChartDimensionsSignature } from "./useChartDimensions.types.js";
export declare const selectorChartDimensionsState: ChartRootSelector<UseChartDimensionsSignature>;
export declare const selectorChartMargin: ((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
  cacheKey: import("../../models/index.js").ChartStateCacheKey;
}) => import("./useChartDimensions.types.js").ChartMargin) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: {
    margin: import("./useChartDimensions.types.js").ChartMargin;
    width: number;
    height: number;
    propsWidth: number | undefined;
    propsHeight: number | undefined;
  }) => import("./useChartDimensions.types.js").ChartMargin;
  memoizedResultFunc: ((resultFuncArgs_0: {
    margin: import("./useChartDimensions.types.js").ChartMargin;
    width: number;
    height: number;
    propsWidth: number | undefined;
    propsHeight: number | undefined;
  }) => import("./useChartDimensions.types.js").ChartMargin) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => import("./useChartDimensions.types.js").ChartMargin;
  dependencies: [ChartRootSelector<UseChartDimensionsSignature>];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartDrawingArea: ((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
  cacheKey: import("../../models/index.js").ChartStateCacheKey;
} & Partial<import("../../../index.js").UseChartCartesianAxisState>) => {
  width: number;
  left: number;
  right: number;
  height: number;
  top: number;
  bottom: number;
}) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: number, resultFuncArgs_1: number, resultFuncArgs_2: number, resultFuncArgs_3: number, resultFuncArgs_4: number, resultFuncArgs_5: number, resultFuncArgs_6: number, resultFuncArgs_7: number, resultFuncArgs_8: number, resultFuncArgs_9: number) => {
    width: number;
    left: number;
    right: number;
    height: number;
    top: number;
    bottom: number;
  };
  memoizedResultFunc: ((resultFuncArgs_0: number, resultFuncArgs_1: number, resultFuncArgs_2: number, resultFuncArgs_3: number, resultFuncArgs_4: number, resultFuncArgs_5: number, resultFuncArgs_6: number, resultFuncArgs_7: number, resultFuncArgs_8: number, resultFuncArgs_9: number) => {
    width: number;
    left: number;
    right: number;
    height: number;
    top: number;
    bottom: number;
  }) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => {
    width: number;
    left: number;
    right: number;
    height: number;
    top: number;
    bottom: number;
  };
  dependencies: [((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => number) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      margin: import("./useChartDimensions.types.js").ChartMargin;
      width: number;
      height: number;
      propsWidth: number | undefined;
      propsHeight: number | undefined;
    }) => number;
    memoizedResultFunc: ((resultFuncArgs_0: {
      margin: import("./useChartDimensions.types.js").ChartMargin;
      width: number;
      height: number;
      propsWidth: number | undefined;
      propsHeight: number | undefined;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => number;
    dependencies: [ChartRootSelector<UseChartDimensionsSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => number) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      margin: import("./useChartDimensions.types.js").ChartMargin;
      width: number;
      height: number;
      propsWidth: number | undefined;
      propsHeight: number | undefined;
    }) => number;
    memoizedResultFunc: ((resultFuncArgs_0: {
      margin: import("./useChartDimensions.types.js").ChartMargin;
      width: number;
      height: number;
      propsWidth: number | undefined;
      propsHeight: number | undefined;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => number;
    dependencies: [ChartRootSelector<UseChartDimensionsSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => number) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: import("./useChartDimensions.types.js").ChartMargin) => number;
    memoizedResultFunc: ((resultFuncArgs_0: import("./useChartDimensions.types.js").ChartMargin) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => number;
    dependencies: [((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => import("./useChartDimensions.types.js").ChartMargin) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        margin: import("./useChartDimensions.types.js").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => import("./useChartDimensions.types.js").ChartMargin;
      memoizedResultFunc: ((resultFuncArgs_0: {
        margin: import("./useChartDimensions.types.js").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => import("./useChartDimensions.types.js").ChartMargin) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("./useChartDimensions.types.js").ChartMargin;
      dependencies: [ChartRootSelector<UseChartDimensionsSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => number) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: import("./useChartDimensions.types.js").ChartMargin) => number;
    memoizedResultFunc: ((resultFuncArgs_0: import("./useChartDimensions.types.js").ChartMargin) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => number;
    dependencies: [((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => import("./useChartDimensions.types.js").ChartMargin) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        margin: import("./useChartDimensions.types.js").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => import("./useChartDimensions.types.js").ChartMargin;
      memoizedResultFunc: ((resultFuncArgs_0: {
        margin: import("./useChartDimensions.types.js").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => import("./useChartDimensions.types.js").ChartMargin) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("./useChartDimensions.types.js").ChartMargin;
      dependencies: [ChartRootSelector<UseChartDimensionsSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => number) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: import("./useChartDimensions.types.js").ChartMargin) => number;
    memoizedResultFunc: ((resultFuncArgs_0: import("./useChartDimensions.types.js").ChartMargin) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => number;
    dependencies: [((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => import("./useChartDimensions.types.js").ChartMargin) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        margin: import("./useChartDimensions.types.js").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => import("./useChartDimensions.types.js").ChartMargin;
      memoizedResultFunc: ((resultFuncArgs_0: {
        margin: import("./useChartDimensions.types.js").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => import("./useChartDimensions.types.js").ChartMargin) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("./useChartDimensions.types.js").ChartMargin;
      dependencies: [ChartRootSelector<UseChartDimensionsSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => number) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: import("./useChartDimensions.types.js").ChartMargin) => number;
    memoizedResultFunc: ((resultFuncArgs_0: import("./useChartDimensions.types.js").ChartMargin) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => number;
    dependencies: [((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => import("./useChartDimensions.types.js").ChartMargin) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        margin: import("./useChartDimensions.types.js").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => import("./useChartDimensions.types.js").ChartMargin;
      memoizedResultFunc: ((resultFuncArgs_0: {
        margin: import("./useChartDimensions.types.js").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => import("./useChartDimensions.types.js").ChartMargin) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("./useChartDimensions.types.js").ChartMargin;
      dependencies: [ChartRootSelector<UseChartDimensionsSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("../../../index.js").UseChartCartesianAxisState> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => number) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => number;
    memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => number;
    dependencies: [((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("../../../index.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../../index.js").DefaultedXAxis[] | undefined;
      dependencies: [(state: import("../../models/index.js").ChartState<[], [import("../../../index.js").UseChartCartesianAxisSignature]>) => {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("../../../index.js").UseChartCartesianAxisState> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => number) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => number;
    memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => number;
    dependencies: [((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("../../../index.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../../index.js").DefaultedYAxis[] | undefined;
      dependencies: [(state: import("../../models/index.js").ChartState<[], [import("../../../index.js").UseChartCartesianAxisSignature]>) => {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("../../../index.js").UseChartCartesianAxisState> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => number) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => number;
    memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => number;
    dependencies: [((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("../../../index.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../../index.js").DefaultedXAxis[] | undefined;
      dependencies: [(state: import("../../models/index.js").ChartState<[], [import("../../../index.js").UseChartCartesianAxisSignature]>) => {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("../../../index.js").UseChartCartesianAxisState> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => number) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => number;
    memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => number;
    dependencies: [((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("../../../index.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../../index.js").DefaultedYAxis[] | undefined;
      dependencies: [(state: import("../../models/index.js").ChartState<[], [import("../../../index.js").UseChartCartesianAxisSignature]>) => {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartPropsSize: ((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
  cacheKey: import("../../models/index.js").ChartStateCacheKey;
}) => {
  width: number | undefined;
  height: number | undefined;
}) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: {
    margin: import("./useChartDimensions.types.js").ChartMargin;
    width: number;
    height: number;
    propsWidth: number | undefined;
    propsHeight: number | undefined;
  }) => {
    width: number | undefined;
    height: number | undefined;
  };
  memoizedResultFunc: ((resultFuncArgs_0: {
    margin: import("./useChartDimensions.types.js").ChartMargin;
    width: number;
    height: number;
    propsWidth: number | undefined;
    propsHeight: number | undefined;
  }) => {
    width: number | undefined;
    height: number | undefined;
  }) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => {
    width: number | undefined;
    height: number | undefined;
  };
  dependencies: [ChartRootSelector<UseChartDimensionsSignature>];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartContainerSize: ((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
  cacheKey: import("../../models/index.js").ChartStateCacheKey;
}) => {
  width: number;
  height: number;
}) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: number, resultFuncArgs_1: number) => {
    width: number;
    height: number;
  };
  memoizedResultFunc: ((resultFuncArgs_0: number, resultFuncArgs_1: number) => {
    width: number;
    height: number;
  }) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => {
    width: number;
    height: number;
  };
  dependencies: [((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => number) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      margin: import("./useChartDimensions.types.js").ChartMargin;
      width: number;
      height: number;
      propsWidth: number | undefined;
      propsHeight: number | undefined;
    }) => number;
    memoizedResultFunc: ((resultFuncArgs_0: {
      margin: import("./useChartDimensions.types.js").ChartMargin;
      width: number;
      height: number;
      propsWidth: number | undefined;
      propsHeight: number | undefined;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => number;
    dependencies: [ChartRootSelector<UseChartDimensionsSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../useChartId/useChartId.types.js").UseChartIdState & import("./useChartDimensions.types.js").UseChartDimensionsState & import("../useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => number) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      margin: import("./useChartDimensions.types.js").ChartMargin;
      width: number;
      height: number;
      propsWidth: number | undefined;
      propsHeight: number | undefined;
    }) => number;
    memoizedResultFunc: ((resultFuncArgs_0: {
      margin: import("./useChartDimensions.types.js").ChartMargin;
      width: number;
      height: number;
      propsWidth: number | undefined;
      propsHeight: number | undefined;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => number;
    dependencies: [ChartRootSelector<UseChartDimensionsSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};