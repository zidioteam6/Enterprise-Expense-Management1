import { UseChartCartesianAxisSignature } from "./useChartCartesianAxis.types.js";
import { ChartState } from "../../models/chart.js";
import { ZoomData } from "./zoom.types.js";
import { AxisId } from "../../../../models/axis.js";
export declare const createZoomMap: (zoom: readonly ZoomData[]) => Map<AxisId, ZoomData>;
/**
 * Following selectors are not exported because they exist in the MIT chart only to ba able to reuse the Zoom state from the pro.
 */
export declare const selectorChartZoomIsInteracting: ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("../../models/index.js").ChartStateCacheKey;
}) => boolean | undefined) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: {
    isInteracting: boolean;
    zoomData: readonly ZoomData[];
  } | undefined) => boolean | undefined;
  memoizedResultFunc: ((resultFuncArgs_0: {
    isInteracting: boolean;
    zoomData: readonly ZoomData[];
  } | undefined) => boolean | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => boolean | undefined;
  dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
    isInteracting: boolean;
    zoomData: readonly ZoomData[];
  } | undefined];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartZoomMap: ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("../../models/index.js").ChartStateCacheKey;
}) => Map<AxisId, ZoomData> | undefined) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: {
    isInteracting: boolean;
    zoomData: readonly ZoomData[];
  } | undefined) => Map<AxisId, ZoomData> | undefined;
  memoizedResultFunc: ((resultFuncArgs_0: {
    isInteracting: boolean;
    zoomData: readonly ZoomData[];
  } | undefined) => Map<AxisId, ZoomData> | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => Map<AxisId, ZoomData> | undefined;
  dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
    isInteracting: boolean;
    zoomData: readonly ZoomData[];
  } | undefined];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartZoomOptionsLookup: ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("../../models/index.js").ChartStateCacheKey;
}) => {
  [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
  [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
}) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) => {
    [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
    [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
  };
  memoizedResultFunc: ((resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) => {
    [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
    [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
  }) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => {
    [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
    [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
  };
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
    memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../../index.js").DefaultedXAxis[] | undefined;
      dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
    memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../../index.js").DefaultedYAxis[] | undefined;
      dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartAxisZoomOptionsLookup: ((state: any, axisId: AxisId) => import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>, resultFuncArgs_2: AxisId) => import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
  memoizedResultFunc: ((resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>, resultFuncArgs_2: AxisId) => import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
    memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../../index.js").DefaultedXAxis[] | undefined;
      dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
    memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../../index.js").DefaultedYAxis[] | undefined;
      dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, (state: any, axisId: AxisId) => AxisId];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
/**
 * The only interesting selectors that merge axis data and zoom if provided.
 */
export declare const selectorChartXAxis: ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("../../models/index.js").ChartStateCacheKey;
} & Partial<{}>) => import("./computeAxisValue.js").ComputeResult<import("../../../index.js").ChartsXAxisProps>) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined, resultFuncArgs_1: {
    width: number;
    left: number;
    right: number;
    height: number;
    top: number;
    bottom: number;
  }, resultFuncArgs_2: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>, resultFuncArgs_3: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>, resultFuncArgs_4: Map<AxisId, ZoomData> | undefined, resultFuncArgs_5: {
    [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
    [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
  }, resultFuncArgs_6: import("./zoom.types.js").GetZoomAxisFilters | undefined) => import("./computeAxisValue.js").ComputeResult<import("../../../index.js").ChartsXAxisProps>;
  memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined, resultFuncArgs_1: {
    width: number;
    left: number;
    right: number;
    height: number;
    top: number;
    bottom: number;
  }, resultFuncArgs_2: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>, resultFuncArgs_3: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>, resultFuncArgs_4: Map<AxisId, ZoomData> | undefined, resultFuncArgs_5: {
    [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
    [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
  }, resultFuncArgs_6: import("./zoom.types.js").GetZoomAxisFilters | undefined) => import("./computeAxisValue.js").ComputeResult<import("../../../index.js").ChartsXAxisProps>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => import("./computeAxisValue.js").ComputeResult<import("../../../index.js").ChartsXAxisProps>;
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      x: import("../../../index.js").DefaultedXAxis[];
      y: import("../../../index.js").DefaultedYAxis[];
    } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined;
    memoizedResultFunc: ((resultFuncArgs_0: {
      x: import("../../../index.js").DefaultedXAxis[];
      y: import("../../../index.js").DefaultedYAxis[];
    } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("../../../index.js").DefaultedXAxis[] | undefined;
    dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
      x: import("../../../index.js").DefaultedXAxis[];
      y: import("../../../index.js").DefaultedYAxis[];
    } | undefined];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  } & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState>) => {
    width: number;
    left: number;
    right: number;
    height: number;
    top: number;
    bottom: number;
  }) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: number, resultFuncArgs_1: number, resultFuncArgs_2: number, resultFuncArgs_3: number, resultFuncArgs_4: number, resultFuncArgs_5: number, resultFuncArgs_6: number, resultFuncArgs_7: number, resultFuncArgs_8: number, resultFuncArgs_9: number) => {
      width: number;
      left: number;
      right: number;
      height: number;
      top: number;
      bottom: number;
    };
    memoizedResultFunc: ((resultFuncArgs_0: number, resultFuncArgs_1: number, resultFuncArgs_2: number, resultFuncArgs_3: number, resultFuncArgs_4: number, resultFuncArgs_5: number, resultFuncArgs_6: number, resultFuncArgs_7: number, resultFuncArgs_8: number, resultFuncArgs_9: number) => {
      width: number;
      left: number;
      right: number;
      height: number;
      top: number;
      bottom: number;
    }) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => {
      width: number;
      left: number;
      right: number;
      height: number;
      top: number;
      bottom: number;
    };
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => number;
      memoizedResultFunc: ((resultFuncArgs_0: {
        margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartDimensionsSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => number;
      memoizedResultFunc: ((resultFuncArgs_0: {
        margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartDimensionsSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../../index.js").DefaultedXAxis[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../../index.js").DefaultedYAxis[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../../index.js").DefaultedXAxis[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../../index.js").DefaultedYAxis[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
      seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
    }) => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
    memoizedResultFunc: ((resultFuncArgs_0: {
      processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
      seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
    }) => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
    dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartSeriesSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
      seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
    }) => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
    memoizedResultFunc: ((resultFuncArgs_0: {
      processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
      seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
    }) => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
    dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartSeriesSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => Map<AxisId, ZoomData> | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      isInteracting: boolean;
      zoomData: readonly ZoomData[];
    } | undefined) => Map<AxisId, ZoomData> | undefined;
    memoizedResultFunc: ((resultFuncArgs_0: {
      isInteracting: boolean;
      zoomData: readonly ZoomData[];
    } | undefined) => Map<AxisId, ZoomData> | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => Map<AxisId, ZoomData> | undefined;
    dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
      isInteracting: boolean;
      zoomData: readonly ZoomData[];
    } | undefined];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => {
    [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
    [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
  }) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) => {
      [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
      [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
    };
    memoizedResultFunc: ((resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) => {
      [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
      [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
    }) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => {
      [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
      [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
    };
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../../index.js").DefaultedXAxis[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../../index.js").DefaultedYAxis[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  } & Partial<{}>) => import("./zoom.types.js").GetZoomAxisFilters | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined, resultFuncArgs_1: ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined, resultFuncArgs_2: import("../../../index.js").DefaultedXAxis[] | undefined, resultFuncArgs_3: import("../../../index.js").DefaultedYAxis[] | undefined) => import("./zoom.types.js").GetZoomAxisFilters | undefined;
    memoizedResultFunc: ((resultFuncArgs_0: ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined, resultFuncArgs_1: ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined, resultFuncArgs_2: import("../../../index.js").DefaultedXAxis[] | undefined, resultFuncArgs_3: import("../../../index.js").DefaultedYAxis[] | undefined) => import("./zoom.types.js").GetZoomAxisFilters | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("./zoom.types.js").GetZoomAxisFilters | undefined;
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    } & Partial<{}>) => ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: Map<AxisId, ZoomData> | undefined, resultFuncArgs_1: {
        [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
      }, resultFuncArgs_2: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>, resultFuncArgs_3: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>) => ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: Map<AxisId, ZoomData> | undefined, resultFuncArgs_1: {
        [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
      }, resultFuncArgs_2: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>, resultFuncArgs_3: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>) => ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => Map<AxisId, ZoomData> | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined) => Map<AxisId, ZoomData> | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined) => Map<AxisId, ZoomData> | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => Map<AxisId, ZoomData> | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => {
        [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
      }) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) => {
          [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        };
        memoizedResultFunc: ((resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) => {
          [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        }) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => {
          [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        };
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
          cacheKey: import("../../models/index.js").ChartStateCacheKey;
        }) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
            cacheKey: import("../../models/index.js").ChartStateCacheKey;
          }) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../../index.js").DefaultedXAxis[] | undefined;
            dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
          cacheKey: import("../../models/index.js").ChartStateCacheKey;
        }) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
            cacheKey: import("../../models/index.js").ChartStateCacheKey;
          }) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../../index.js").DefaultedYAxis[] | undefined;
            dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
          seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        }) => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        memoizedResultFunc: ((resultFuncArgs_0: {
          processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
          seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        }) => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartSeriesSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
          seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        }) => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
        memoizedResultFunc: ((resultFuncArgs_0: {
          processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
          seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        }) => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
        dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartSeriesSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    } & Partial<{}>) => ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: Map<AxisId, ZoomData> | undefined, resultFuncArgs_1: {
        [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
      }, resultFuncArgs_2: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>, resultFuncArgs_3: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>) => ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: Map<AxisId, ZoomData> | undefined, resultFuncArgs_1: {
        [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
      }, resultFuncArgs_2: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>, resultFuncArgs_3: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>) => ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => Map<AxisId, ZoomData> | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined) => Map<AxisId, ZoomData> | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined) => Map<AxisId, ZoomData> | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => Map<AxisId, ZoomData> | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => {
        [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
      }) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) => {
          [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        };
        memoizedResultFunc: ((resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) => {
          [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        }) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => {
          [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        };
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
          cacheKey: import("../../models/index.js").ChartStateCacheKey;
        }) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
            cacheKey: import("../../models/index.js").ChartStateCacheKey;
          }) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../../index.js").DefaultedXAxis[] | undefined;
            dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
          cacheKey: import("../../models/index.js").ChartStateCacheKey;
        }) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
            cacheKey: import("../../models/index.js").ChartStateCacheKey;
          }) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../../index.js").DefaultedYAxis[] | undefined;
            dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
          seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        }) => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        memoizedResultFunc: ((resultFuncArgs_0: {
          processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
          seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        }) => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartSeriesSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
          seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        }) => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
        memoizedResultFunc: ((resultFuncArgs_0: {
          processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
          seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        }) => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
        dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartSeriesSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../../index.js").DefaultedXAxis[] | undefined;
      dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../../index.js").DefaultedYAxis[] | undefined;
      dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartYAxis: ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
  cacheKey: import("../../models/index.js").ChartStateCacheKey;
} & Partial<{}>) => import("./computeAxisValue.js").ComputeResult<import("../../../index.js").ChartsYAxisProps>) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined, resultFuncArgs_1: {
    width: number;
    left: number;
    right: number;
    height: number;
    top: number;
    bottom: number;
  }, resultFuncArgs_2: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>, resultFuncArgs_3: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>, resultFuncArgs_4: Map<AxisId, ZoomData> | undefined, resultFuncArgs_5: {
    [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
    [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
  }, resultFuncArgs_6: import("./zoom.types.js").GetZoomAxisFilters | undefined) => import("./computeAxisValue.js").ComputeResult<import("../../../index.js").ChartsYAxisProps>;
  memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined, resultFuncArgs_1: {
    width: number;
    left: number;
    right: number;
    height: number;
    top: number;
    bottom: number;
  }, resultFuncArgs_2: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>, resultFuncArgs_3: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>, resultFuncArgs_4: Map<AxisId, ZoomData> | undefined, resultFuncArgs_5: {
    [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
    [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
  }, resultFuncArgs_6: import("./zoom.types.js").GetZoomAxisFilters | undefined) => import("./computeAxisValue.js").ComputeResult<import("../../../index.js").ChartsYAxisProps>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => import("./computeAxisValue.js").ComputeResult<import("../../../index.js").ChartsYAxisProps>;
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      x: import("../../../index.js").DefaultedXAxis[];
      y: import("../../../index.js").DefaultedYAxis[];
    } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined;
    memoizedResultFunc: ((resultFuncArgs_0: {
      x: import("../../../index.js").DefaultedXAxis[];
      y: import("../../../index.js").DefaultedYAxis[];
    } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("../../../index.js").DefaultedYAxis[] | undefined;
    dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
      x: import("../../../index.js").DefaultedXAxis[];
      y: import("../../../index.js").DefaultedYAxis[];
    } | undefined];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  } & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState>) => {
    width: number;
    left: number;
    right: number;
    height: number;
    top: number;
    bottom: number;
  }) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: number, resultFuncArgs_1: number, resultFuncArgs_2: number, resultFuncArgs_3: number, resultFuncArgs_4: number, resultFuncArgs_5: number, resultFuncArgs_6: number, resultFuncArgs_7: number, resultFuncArgs_8: number, resultFuncArgs_9: number) => {
      width: number;
      left: number;
      right: number;
      height: number;
      top: number;
      bottom: number;
    };
    memoizedResultFunc: ((resultFuncArgs_0: number, resultFuncArgs_1: number, resultFuncArgs_2: number, resultFuncArgs_3: number, resultFuncArgs_4: number, resultFuncArgs_5: number, resultFuncArgs_6: number, resultFuncArgs_7: number, resultFuncArgs_8: number, resultFuncArgs_9: number) => {
      width: number;
      left: number;
      right: number;
      height: number;
      top: number;
      bottom: number;
    }) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => {
      width: number;
      left: number;
      right: number;
      height: number;
      top: number;
      bottom: number;
    };
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => number;
      memoizedResultFunc: ((resultFuncArgs_0: {
        margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartDimensionsSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => number;
      memoizedResultFunc: ((resultFuncArgs_0: {
        margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        width: number;
        height: number;
        propsWidth: number | undefined;
        propsHeight: number | undefined;
      }) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartDimensionsSignature>];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        memoizedResultFunc: ((resultFuncArgs_0: {
          margin: import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
          width: number;
          height: number;
          propsWidth: number | undefined;
          propsHeight: number | undefined;
        }) => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").ChartMargin;
        dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartDimensionsSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../../index.js").DefaultedXAxis[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../../index.js").DefaultedYAxis[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../../index.js").DefaultedXAxis[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => number) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => number;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => number) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => number;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../../index.js").DefaultedYAxis[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
      seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
    }) => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
    memoizedResultFunc: ((resultFuncArgs_0: {
      processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
      seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
    }) => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
    dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartSeriesSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
      seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
    }) => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
    memoizedResultFunc: ((resultFuncArgs_0: {
      processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
      seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
    }) => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
    dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartSeriesSignature>];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => Map<AxisId, ZoomData> | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      isInteracting: boolean;
      zoomData: readonly ZoomData[];
    } | undefined) => Map<AxisId, ZoomData> | undefined;
    memoizedResultFunc: ((resultFuncArgs_0: {
      isInteracting: boolean;
      zoomData: readonly ZoomData[];
    } | undefined) => Map<AxisId, ZoomData> | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => Map<AxisId, ZoomData> | undefined;
    dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
      isInteracting: boolean;
      zoomData: readonly ZoomData[];
    } | undefined];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => {
    [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
    [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
  }) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) => {
      [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
      [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
    };
    memoizedResultFunc: ((resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) => {
      [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
      [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
    }) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => {
      [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
      [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
    };
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../../index.js").DefaultedXAxis[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
      memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../../index.js").DefaultedYAxis[] | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          x: import("../../../index.js").DefaultedXAxis[];
          y: import("../../../index.js").DefaultedYAxis[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  } & Partial<{}>) => import("./zoom.types.js").GetZoomAxisFilters | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined, resultFuncArgs_1: ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined, resultFuncArgs_2: import("../../../index.js").DefaultedXAxis[] | undefined, resultFuncArgs_3: import("../../../index.js").DefaultedYAxis[] | undefined) => import("./zoom.types.js").GetZoomAxisFilters | undefined;
    memoizedResultFunc: ((resultFuncArgs_0: ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined, resultFuncArgs_1: ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined, resultFuncArgs_2: import("../../../index.js").DefaultedXAxis[] | undefined, resultFuncArgs_3: import("../../../index.js").DefaultedYAxis[] | undefined) => import("./zoom.types.js").GetZoomAxisFilters | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("./zoom.types.js").GetZoomAxisFilters | undefined;
    dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    } & Partial<{}>) => ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: Map<AxisId, ZoomData> | undefined, resultFuncArgs_1: {
        [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
      }, resultFuncArgs_2: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>, resultFuncArgs_3: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>) => ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: Map<AxisId, ZoomData> | undefined, resultFuncArgs_1: {
        [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
      }, resultFuncArgs_2: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>, resultFuncArgs_3: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>) => ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsXAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => Map<AxisId, ZoomData> | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined) => Map<AxisId, ZoomData> | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined) => Map<AxisId, ZoomData> | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => Map<AxisId, ZoomData> | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => {
        [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
      }) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) => {
          [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        };
        memoizedResultFunc: ((resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) => {
          [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        }) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => {
          [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        };
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
          cacheKey: import("../../models/index.js").ChartStateCacheKey;
        }) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
            cacheKey: import("../../models/index.js").ChartStateCacheKey;
          }) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../../index.js").DefaultedXAxis[] | undefined;
            dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
          cacheKey: import("../../models/index.js").ChartStateCacheKey;
        }) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
            cacheKey: import("../../models/index.js").ChartStateCacheKey;
          }) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../../index.js").DefaultedYAxis[] | undefined;
            dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
          seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        }) => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        memoizedResultFunc: ((resultFuncArgs_0: {
          processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
          seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        }) => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartSeriesSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
          seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        }) => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
        memoizedResultFunc: ((resultFuncArgs_0: {
          processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
          seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        }) => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
        dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartSeriesSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    } & Partial<{}>) => ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: Map<AxisId, ZoomData> | undefined, resultFuncArgs_1: {
        [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
      }, resultFuncArgs_2: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>, resultFuncArgs_3: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>) => ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: Map<AxisId, ZoomData> | undefined, resultFuncArgs_1: {
        [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
      }, resultFuncArgs_2: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>, resultFuncArgs_3: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>) => ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => ((axis: import("../../../index.js").AxisConfig<import("../../../index.js").ScaleName, any, import("../../../index.js").ChartsYAxisProps>, axisIndex: number) => import("./useChartCartesianAxis.types.js").ExtremumFilter | null) | undefined;
      dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => Map<AxisId, ZoomData> | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined) => Map<AxisId, ZoomData> | undefined;
        memoizedResultFunc: ((resultFuncArgs_0: {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined) => Map<AxisId, ZoomData> | undefined) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => Map<AxisId, ZoomData> | undefined;
        dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
          isInteracting: boolean;
          zoomData: readonly ZoomData[];
        } | undefined];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => {
        [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
      }) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) => {
          [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        };
        memoizedResultFunc: ((resultFuncArgs_0: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>, resultFuncArgs_1: Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) => {
          [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        }) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => {
          [x: string]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
          [x: number]: import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions;
        };
        dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
          cacheKey: import("../../models/index.js").ChartStateCacheKey;
        }) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
            cacheKey: import("../../models/index.js").ChartStateCacheKey;
          }) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../../index.js").DefaultedXAxis[] | undefined;
            dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
          cacheKey: import("../../models/index.js").ChartStateCacheKey;
        }) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        } & {
          resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
          memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedYAxis[] | undefined) => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          };
          lastResult: () => Record<AxisId, import("./useChartCartesianAxis.types.js").DefaultizedZoomOptions>;
          dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
            cacheKey: import("../../models/index.js").ChartStateCacheKey;
          }) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
            clearCache: () => void;
            resultsCount: () => number;
            resetResultsCount: () => void;
          } & {
            resultFunc: (resultFuncArgs_0: {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined;
            memoizedResultFunc: ((resultFuncArgs_0: {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
              clearCache: () => void;
              resultsCount: () => number;
              resetResultsCount: () => void;
            };
            lastResult: () => import("../../../index.js").DefaultedYAxis[] | undefined;
            dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
              x: import("../../../index.js").DefaultedXAxis[];
              y: import("../../../index.js").DefaultedYAxis[];
            } | undefined];
            recomputations: () => number;
            resetRecomputations: () => void;
            dependencyRecomputations: () => number;
            resetDependencyRecomputations: () => void;
          } & {
            memoize: typeof import("reselect").weakMapMemoize;
            argsMemoize: typeof import("reselect").weakMapMemoize;
          }];
          recomputations: () => number;
          resetRecomputations: () => void;
          dependencyRecomputations: () => number;
          resetDependencyRecomputations: () => void;
        } & {
          memoize: typeof import("reselect").weakMapMemoize;
          argsMemoize: typeof import("reselect").weakMapMemoize;
        }];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
          seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        }) => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        memoizedResultFunc: ((resultFuncArgs_0: {
          processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
          seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        }) => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartSeriesSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<{}> & {
        cacheKey: import("../../models/index.js").ChartStateCacheKey;
      }) => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      } & {
        resultFunc: (resultFuncArgs_0: {
          processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
          seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        }) => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
        memoizedResultFunc: ((resultFuncArgs_0: {
          processedSeries: import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
          seriesConfig: import("../../models/index.js").ChartSeriesConfig<keyof import("../../../index.js").ChartsSeriesConfig>;
        }) => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>) & {
          clearCache: () => void;
          resultsCount: () => number;
          resetResultsCount: () => void;
        };
        lastResult: () => import("../../../index.js").ProcessedSeries<keyof import("../../../index.js").ChartsSeriesConfig>;
        dependencies: [import("../../../index.js").ChartRootSelector<import("../../../index.js").UseChartSeriesSignature>];
        recomputations: () => number;
        resetRecomputations: () => void;
        dependencyRecomputations: () => number;
        resetDependencyRecomputations: () => void;
      } & {
        memoize: typeof import("reselect").weakMapMemoize;
        argsMemoize: typeof import("reselect").weakMapMemoize;
      }];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../../index.js").DefaultedXAxis[] | undefined;
      dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
      cacheKey: import("../../models/index.js").ChartStateCacheKey;
    }) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    } & {
      resultFunc: (resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined;
      memoizedResultFunc: ((resultFuncArgs_0: {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
        clearCache: () => void;
        resultsCount: () => number;
        resetResultsCount: () => void;
      };
      lastResult: () => import("../../../index.js").DefaultedYAxis[] | undefined;
      dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
        x: import("../../../index.js").DefaultedXAxis[];
        y: import("../../../index.js").DefaultedYAxis[];
      } | undefined];
      recomputations: () => number;
      resetRecomputations: () => void;
      dependencyRecomputations: () => number;
      resetDependencyRecomputations: () => void;
    } & {
      memoize: typeof import("reselect").weakMapMemoize;
      argsMemoize: typeof import("reselect").weakMapMemoize;
    }];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};
export declare const selectorChartRawAxis: ((state: any, axisId: AxisId) => import("../../../index.js").DefaultedXAxis | import("../../../index.js").DefaultedYAxis | undefined) & {
  clearCache: () => void;
  resultsCount: () => number;
  resetResultsCount: () => void;
} & {
  resultFunc: (resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined, resultFuncArgs_1: import("../../../index.js").DefaultedYAxis[] | undefined, resultFuncArgs_2: AxisId) => import("../../../index.js").DefaultedXAxis | import("../../../index.js").DefaultedYAxis | undefined;
  memoizedResultFunc: ((resultFuncArgs_0: import("../../../index.js").DefaultedXAxis[] | undefined, resultFuncArgs_1: import("../../../index.js").DefaultedYAxis[] | undefined, resultFuncArgs_2: AxisId) => import("../../../index.js").DefaultedXAxis | import("../../../index.js").DefaultedYAxis | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  };
  lastResult: () => import("../../../index.js").DefaultedXAxis | import("../../../index.js").DefaultedYAxis | undefined;
  dependencies: [((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      x: import("../../../index.js").DefaultedXAxis[];
      y: import("../../../index.js").DefaultedYAxis[];
    } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined;
    memoizedResultFunc: ((resultFuncArgs_0: {
      x: import("../../../index.js").DefaultedXAxis[];
      y: import("../../../index.js").DefaultedYAxis[];
    } | undefined) => import("../../../index.js").DefaultedXAxis[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("../../../index.js").DefaultedXAxis[] | undefined;
    dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
      x: import("../../../index.js").DefaultedXAxis[];
      y: import("../../../index.js").DefaultedYAxis[];
    } | undefined];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, ((state: import("../../corePlugins/useChartId/useChartId.types.js").UseChartIdState & import("../../corePlugins/useChartDimensions/useChartDimensions.types.js").UseChartDimensionsState & import("../../corePlugins/useChartSeries/useChartSeries.types.js").UseChartSeriesState<keyof import("../../../index.js").ChartsSeriesConfig> & import("../../corePlugins/useChartAnimation/useChartAnimation.types.js").UseChartAnimationState & Partial<import("./useChartCartesianAxis.types.js").UseChartCartesianAxisState> & {
    cacheKey: import("../../models/index.js").ChartStateCacheKey;
  }) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
    clearCache: () => void;
    resultsCount: () => number;
    resetResultsCount: () => void;
  } & {
    resultFunc: (resultFuncArgs_0: {
      x: import("../../../index.js").DefaultedXAxis[];
      y: import("../../../index.js").DefaultedYAxis[];
    } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined;
    memoizedResultFunc: ((resultFuncArgs_0: {
      x: import("../../../index.js").DefaultedXAxis[];
      y: import("../../../index.js").DefaultedYAxis[];
    } | undefined) => import("../../../index.js").DefaultedYAxis[] | undefined) & {
      clearCache: () => void;
      resultsCount: () => number;
      resetResultsCount: () => void;
    };
    lastResult: () => import("../../../index.js").DefaultedYAxis[] | undefined;
    dependencies: [(state: ChartState<[], [UseChartCartesianAxisSignature]>) => {
      x: import("../../../index.js").DefaultedXAxis[];
      y: import("../../../index.js").DefaultedYAxis[];
    } | undefined];
    recomputations: () => number;
    resetRecomputations: () => void;
    dependencyRecomputations: () => number;
    resetDependencyRecomputations: () => void;
  } & {
    memoize: typeof import("reselect").weakMapMemoize;
    argsMemoize: typeof import("reselect").weakMapMemoize;
  }, (state: any, axisId: AxisId) => AxisId];
  recomputations: () => number;
  resetRecomputations: () => void;
  dependencyRecomputations: () => number;
  resetDependencyRecomputations: () => void;
} & {
  memoize: typeof import("reselect").weakMapMemoize;
  argsMemoize: typeof import("reselect").weakMapMemoize;
};