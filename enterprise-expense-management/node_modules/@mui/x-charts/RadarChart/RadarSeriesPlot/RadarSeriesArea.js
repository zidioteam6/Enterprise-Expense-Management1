"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RadarSeriesArea = RadarSeriesArea;
exports.getPathProps = getPathProps;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _clsx = _interopRequireDefault(require("clsx"));
var _useRadarSeriesData = require("./useRadarSeriesData");
var _getAreaPath = require("./getAreaPath");
var _radarSeriesPlotClasses = require("./radarSeriesPlotClasses");
var _useItemHighlightedGetter = require("../../hooks/useItemHighlightedGetter");
var _useInteractionItemProps = require("../../hooks/useInteractionItemProps");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["seriesId"];
function getPathProps(params) {
  const {
    isHighlighted,
    isFaded,
    seriesId,
    classes,
    points,
    fillArea,
    color
  } = params;
  const isItemHighlighted = isHighlighted({
    seriesId
  });
  const isItemFaded = !isItemHighlighted && isFaded({
    seriesId
  });
  return {
    d: (0, _getAreaPath.getAreaPath)(points),
    fill: fillArea ? color : 'transparent',
    stroke: color,
    className: (0, _clsx.default)(classes.area, isItemHighlighted && classes.highlighted || isItemFaded && classes.faded),
    strokeOpacity: isItemFaded ? 0.5 : 1,
    fillOpacity: isItemHighlighted && 0.4 || isItemFaded && 0.1 || 0.2,
    strokeWidth: !fillArea && isItemHighlighted ? 2 : 1
  };
}
function RadarSeriesArea(props) {
  const {
      seriesId
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const seriesCoordinates = (0, _useRadarSeriesData.useRadarSeriesData)(seriesId);
  const interactionProps = (0, _useInteractionItemProps.useInteractionAllItemProps)(seriesCoordinates);
  const {
    isFaded,
    isHighlighted
  } = (0, _useItemHighlightedGetter.useItemHighlightedGetter)();
  const classes = (0, _radarSeriesPlotClasses.useUtilityClasses)(props.classes);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(React.Fragment, {
    children: seriesCoordinates?.map(({
      seriesId: id,
      points,
      color,
      fillArea
    }, seriesIndex) => {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("path", (0, _extends2.default)({}, getPathProps({
        seriesId: id,
        points,
        color,
        fillArea,
        isFaded,
        isHighlighted,
        classes
      }), interactionProps[seriesIndex], other), id);
    })
  });
}
process.env.NODE_ENV !== "production" ? RadarSeriesArea.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,
  /**
   * The id of the series to display.
   * If undefined all series are displayed.
   */
  seriesId: _propTypes.default.string
} : void 0;