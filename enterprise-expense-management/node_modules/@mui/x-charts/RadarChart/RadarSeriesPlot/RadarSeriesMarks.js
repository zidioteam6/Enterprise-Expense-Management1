"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RadarSeriesMarks = RadarSeriesMarks;
exports.getCircleProps = getCircleProps;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var React = _interopRequireWildcard(require("react"));
var _clsx = require("clsx");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useRadarSeriesData = require("./useRadarSeriesData");
var _useItemHighlightedGetter = require("../../hooks/useItemHighlightedGetter");
var _radarSeriesPlotClasses = require("./radarSeriesPlotClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["seriesId"];
function getCircleProps(params) {
  const {
    isHighlighted,
    isFaded,
    seriesId,
    classes,
    point,
    fillArea,
    color
  } = params;
  const isItemHighlighted = isHighlighted({
    seriesId
  });
  const isItemFaded = !isItemHighlighted && isFaded({
    seriesId
  });
  return {
    cx: point.x,
    cy: point.y,
    r: 3,
    fill: color,
    stroke: color,
    opacity: fillArea && isItemFaded ? 0.5 : 1,
    pointerEvents: 'none',
    className: (0, _clsx.clsx)(classes.mark, isItemHighlighted && classes.highlighted || isItemFaded && classes.faded)
  };
}
function RadarSeriesMarks(props) {
  const other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const seriesCoordinates = (0, _useRadarSeriesData.useRadarSeriesData)(props.seriesId);
  const classes = (0, _radarSeriesPlotClasses.useUtilityClasses)(props.classes);
  const {
    isFaded,
    isHighlighted
  } = (0, _useItemHighlightedGetter.useItemHighlightedGetter)();
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(React.Fragment, {
    children: seriesCoordinates?.map(({
      seriesId: id,
      points,
      color,
      hideMark,
      fillArea
    }) => {
      if (hideMark) {
        return null;
      }
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("g", {
        children: points.map((point, index) => /*#__PURE__*/(0, _jsxRuntime.jsx)("circle", (0, _extends2.default)({}, getCircleProps({
          seriesId: id,
          point,
          color,
          fillArea,
          isFaded,
          isHighlighted,
          classes
        }), other), index))
      }, id);
    })
  });
}
process.env.NODE_ENV !== "production" ? RadarSeriesMarks.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,
  /**
   * The id of the series to display.
   * If undefined all series are displayed.
   */
  seriesId: _propTypes.default.string
} : void 0;