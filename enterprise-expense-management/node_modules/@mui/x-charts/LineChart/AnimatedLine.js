"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnimatedLine = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _hooks = require("../hooks");
var _AppearingMask = require("./AppearingMask");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["skipAnimation", "ownerState"];
/**
 * Demos:
 *
 * - [Lines](https://mui.com/x/react-charts/lines/)
 * - [Line demonstration](https://mui.com/x/react-charts/line-demo/)
 *
 * API:
 *
 * - [AnimatedLine API](https://mui.com/x/api/charts/animated-line/)
 */
const AnimatedLine = exports.AnimatedLine = /*#__PURE__*/React.forwardRef(function AnimatedLine(props, ref) {
  const {
      skipAnimation,
      ownerState
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const animateProps = (0, _hooks.useAnimateLine)((0, _extends2.default)({}, props, {
    ref
  }));
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_AppearingMask.AppearingMask, {
    skipAnimation: skipAnimation,
    id: `${ownerState.id}-line-clip`,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("path", (0, _extends2.default)({
      stroke: ownerState.gradientId ? `url(#${ownerState.gradientId})` : ownerState.color,
      strokeWidth: 2,
      strokeLinejoin: "round",
      fill: "none",
      filter: ownerState.isHighlighted ? 'brightness(120%)' : undefined,
      opacity: ownerState.isFaded ? 0.3 : 1
    }, other, animateProps))
  });
});
if (process.env.NODE_ENV !== "production") AnimatedLine.displayName = "AnimatedLine";
process.env.NODE_ENV !== "production" ? AnimatedLine.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  d: _propTypes.default.string.isRequired,
  ownerState: _propTypes.default.shape({
    classes: _propTypes.default.object,
    color: _propTypes.default.string.isRequired,
    gradientId: _propTypes.default.string,
    id: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]).isRequired,
    isFaded: _propTypes.default.bool.isRequired,
    isHighlighted: _propTypes.default.bool.isRequired
  }).isRequired,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: _propTypes.default.bool
} : void 0;