"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CircleMarkElement = CircleMarkElement;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _styles = require("@mui/material/styles");
var _animation = require("../internals/animation/animation");
var _useInteractionItemProps = require("../hooks/useInteractionItemProps");
var _markElementClasses = require("./markElementClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["x", "y", "id", "classes", "color", "dataIndex", "onClick", "skipAnimation", "isFaded", "isHighlighted"];
const Circle = (0, _styles.styled)('circle')({
  [`&.${_markElementClasses.markElementClasses.animate}`]: {
    transitionDuration: `${_animation.ANIMATION_DURATION_MS}ms`,
    transitionProperty: 'cx, cy',
    transitionTimingFunction: _animation.ANIMATION_TIMING_FUNCTION
  }
});

/**
 * The line mark element that only render circle for performance improvement.
 *
 * Demos:
 *
 * - [Lines](https://mui.com/x/react-charts/lines/)
 * - [Line demonstration](https://mui.com/x/react-charts/line-demo/)
 *
 * API:
 *
 * - [CircleMarkElement API](https://mui.com/x/api/charts/circle-mark-element/)
 */
function CircleMarkElement(props) {
  const {
      x,
      y,
      id,
      classes: innerClasses,
      color,
      dataIndex,
      onClick,
      skipAnimation,
      isFaded = false,
      isHighlighted = false
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const theme = (0, _styles.useTheme)();
  const interactionProps = (0, _useInteractionItemProps.useInteractionItemProps)({
    type: 'line',
    seriesId: id,
    dataIndex
  });
  const ownerState = {
    id,
    classes: innerClasses,
    isHighlighted,
    isFaded,
    color,
    skipAnimation
  };
  const classes = (0, _markElementClasses.useUtilityClasses)(ownerState);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Circle, (0, _extends2.default)({}, other, {
    cx: x,
    cy: y,
    r: 5,
    fill: (theme.vars || theme).palette.background.paper,
    stroke: color,
    strokeWidth: 2,
    className: classes.root,
    onClick: onClick,
    cursor: onClick ? 'pointer' : 'unset'
  }, interactionProps));
}
process.env.NODE_ENV !== "production" ? CircleMarkElement.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  classes: _propTypes.default.object,
  /**
   * The index to the element in the series' data array.
   */
  dataIndex: _propTypes.default.number.isRequired,
  id: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]).isRequired,
  /**
   * The shape of the marker.
   */
  shape: _propTypes.default.oneOf(['circle', 'cross', 'diamond', 'square', 'star', 'triangle', 'wye']).isRequired,
  /**
   * If `true`, animations are skipped.
   * @default false
   */
  skipAnimation: _propTypes.default.bool
} : void 0;